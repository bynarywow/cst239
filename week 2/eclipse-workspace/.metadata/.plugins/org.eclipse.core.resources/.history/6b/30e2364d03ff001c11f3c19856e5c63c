package app;

import java.util.ArrayList;
import java.util.Scanner;

public class Store
{
	private Product product;
	private Cart cart;
	private static Inventory inventory;
	private static ArrayList<Product> store;
	
	public static ArrayList<Product> init()
	{
		Scanner scan = new Scanner(System.in);
		ArrayList<Product> store = new ArrayList<Product>();
		Inventory inventory = new Inventory();
		
		Cart cart = new Cart();
		
		Product sword = new Product(0, "Needle", "Stick them with the pointy end", 150, 1, true);
		Product shield = new Product(1, "Bulwark of Azzinoth", "The coolest shield from the Burning Crusade", 100, 1, true);
		Product smallHealthPotion = new Product(2, "Small Health Potion", "Heals 50 HP", 50, 5, true);
		
		store.add(sword);
		store.add(shield);
		store.add(smallHealthPotion);
		
		//debug
		//System.out.println(store.toString());
		
		displayMenus(inventory, "Main", store, cart);
		return store;
	}
	
	public static void placeInCart(Inventory inventory, Cart cart, ArrayList<Product> store,Scanner scan)
	{
		String in = scan.nextLine();
		//index = selection - 1
		int selectionIndex = Integer.parseInt(in) - 1;
		//if player gold > cost of item
		if(inventory.canPurchase(store.get(selectionIndex)))
		{
			//give the item and subtract the appropriate amount of gold
			cart.addToCart(store.get(selectionIndex));
			//cart.setGold(inventory.getGold()-store.get(selectionIndex).getPrice());
			
		}
	}
	public static void setQuantity(Product product, int quantity)
	{
		product.setQuantity(quantity);
	}
	
	public static void displayMenus(Inventory inventory, String menuSelection, ArrayList<Product> store, Cart cart)
	{
		//String vars for all menu options and flavor text
		String welcome = "Welcome to Xoblob's Odds and Ends!\nPlease, have a look around!\n";
		String cartIntro = "You could swear your basket just moved... \nbut anyway, here's your cart so far: \n";
		String inventoryIntro = "Opening your Bag of Holding, you find: \n";
		String productIntro = "\nUpon further examination, there are odd looking tentacles \nwrithing around near the product\n";
		String options = "\nPress 1 to look at our items for sale\nPress 2 to sell back your items\nPress 3 to look at your cart\n";
		String sellIntro = "What would you like to sell?\n";
		String purchaseIntro = "Would you like to finalize your transaction?\n";
		String quit = "Press 'q' to return to the main menu.";
		String sellItems = "Press 4 to sell items back to the store\n";
		String checkout = "Press 4 to check out with the items currently in your cart\n";
		String playerGold = "\nYou have " + inventory.getGold() +  " gold.\n";
		
		if(menuSelection.equals("Main"))
		{
			////clearscreen();
			System.out.println(welcome + options + quit);
		}
		/*
		 * cart and endcart selections are a bit convoluted so here's my best explanation
		 * cart displays the player's current cart, then returns to print endcart.
		 * After endcart prints to screen, it calls checkoutlistener to wait for
		 * user input to select items to either return to shelf or complete the sale of
		 * the items in their cart.
		 */
		if(menuSelection.equals("Cart"))
		{
			//clearscreen();
			System.out.println(cartIntro + playerGold);
			displaySalables(inventory, cart, store, "checkout");
		}
		if(menuSelection.equals("EndCart"))
		{
			System.out.println(options + checkout + quit);
			checkoutListener(cart, store, inventory);
		}
		if(menuSelection.equals("Inventory"))
		{
			//clearscreen();
			System.out.println(inventoryIntro + playerGold);
			displaySalables(inventory, cart, store, "sell");
			System.out.println(options + quit);
		}
		if(menuSelection.equals("Product"))
		{
			//clearscreen();
			System.out.println(productIntro + playerGold);
			System.out.println(quit + "\n");
			displaySalables(inventory, cart, store, "browse");

		}
		if(menuSelection.equals("Selling"))
		{
			//clearscreen();
			System.out.println(welcome + sellIntro + playerGold);
			displaySalables(inventory, cart, store, "sell");
		}
		if(menuSelection.equals("EndSelling"))
		{
			System.out.println(options + sellItems + quit);
			sellListener(inventory, cart, store);
		}
		if(menuSelection.equals("Purchase"))
		{
			//clearscreen();
			System.out.println(purchaseIntro);
			displaySalables(inventory, cart, store, "checkout");
			System.out.println("Press R to remove items\n" + checkout);
		}
	}
	/**
	 * pseudo-clearScreen. It just prints a bunch of blank lines to spam the console window with nothing.
	 */
	public static void clearScreen()
	{
		for(int i = 0; i < 10; i++)
		{
			System.out.println();
		}
	}
	/**
	 * displaySalables pulls relevant information from player inventory/cart or store
	 * to display the correct options in order to place items in the cart, complete a sale
	 * from the cart, sell items back to the store, or remove items from the cart
	 * @param inventory
	 * @param cart
	 * @param store
	 * @param mode
	 */
	public static void displaySalables(Inventory inventory, Cart cart, ArrayList<Product> store, String mode)
	{		
		if(mode.equals("browse"))
		{
			System.out.println("X O B L O B ' S \nO D D S \nA N D \nE N D S");
			for(int i = 0; i < store.size(); i++)
			{
				int j = i + 1;
				System.out.println( j + ". " + store.get(i).getName() 
							+ " || cost: " + store.get(i).getPrice() + " gold.\n"
							+ "In stock: " + store.get(i).getQuantity()); 
			}
			browseListener(cart, store, inventory);
		}
		if(mode.equals("checkout"))
		{
			for(int i = 0; i < cart.size(); i++)
			{
				int j = i + 1;
				System.out.println(j + ". " + cart.get(i).getName() 
							+ " || cost: " + cart.get(i).getPrice() + " gold.\n"
							+ " In cart: " + cart.get(i).getQuantity());
			}
			displayMenus(inventory, "EndCart", store, cart);
		}
		if(mode.equals("sell"))
		{
			for(int i = 0; i < inventory.size(); i++)
			{
				int j = i + 1;
				System.out.println(j + ". " + inventory.get(i).getName() 
							+ " || cost: " + inventory.get(i).getPrice() + " gold.\n"
							+ " In inventory: " + inventory.get(i).getQuantity());
			}
			displayMenus(inventory, "EndSelling", store, cart);
		}
	}
	/**
	 * custom toString that should print store contents with a new line character between each element
	 */
	public String toString()
	{
		String out = "";
		
		for(int i = 0; i < store.size(); i++)
		{
			out += "\n" + store.get(i).toString();
		}
		
		return out;
	}
	/**
	 * checkoutListener gets the total price for the player's cart, 
	 * making sure that they can afford their whole cart
	 * then allows the purchase, exchanging the items for gold.
	 * @param cart
	 * @param store
	 * @param inventory
	 */
	public static void checkoutListener(Cart cart, ArrayList<Product> store, Inventory inventory)
	{
		Scanner scan = new Scanner(System.in);
		String in = scan.nextLine();
		int total = 0;
		
		//now that we're in a new menu, need old menus
		//to still be able to work even with the new option on 4
		if(in.equals("1"))
		{
			displayMenus(inventory, "Product", store, cart);
		}
		if(in.equals("2"))
		{
			displayMenus(inventory, "Selling", store, cart);
		}
		if(in.equals("3"))
		{
			displayMenus(inventory, "Cart", store, cart);
		}
		if(in.equals("4"))
		{
			for(int i = 0; i < cart.size(); i++)
			{
				total += cart.get(i).getPrice();
			}
			//if player has enough gold for total cart
			if(inventory.getGold() > total)
			{
				for(int i = 0; i < cart.size(); i++)
				{
					inventory.addToInventory(cart.get(i));
					setQuantity(cart.get(i),store.get(i).getQuantity());
				}
				inventory.setGold(inventory.getGold()-total);
				System.out.println("Exchanged " + total + " gold pieces for the contents of your cart");
			}
			else
			{
				System.out.println("Not enough gold. You have " + inventory.getGold() + ".\n You need a total of " + total + " gold.");
				displayMenus(inventory, "Cart", store, cart);
			}
		}
		if(in.equalsIgnoreCase("r"))
		{
			Scanner two = new Scanner(System.in);
			String remove = two.nextLine();
			
			System.out.println("\nWhich items would you like to take out of your cart?\n");
			for(int i = 0; i < cart.size(); i++)
			{
				System.out.print(cart.get(i));
				if(Integer.parseInt(remove) - 1 == i)
				{
					
				}
			}
		}
	}
	public static void confirm(Inventory inventory, ArrayList<Product> store, int index)
	{
		Scanner scan = new Scanner(System.in);
		String in = scan.nextLine();
		//make them sell for a loss!
		System.out.println("Confirm sale of " + inventory.get(index) + " to the shop for " + store.get(index).getPrice() * 0.8);
		
	}
	
	public static void sellListener(Inventory inventory, Cart cart, ArrayList<Product> store)
	{
		Scanner scan = new Scanner(System.in);
		String in = scan.nextLine();
		
		for(int i = 0; i < inventory.size(); i++)
		{
			int selectionIndex = i - 1;
			if(Integer.parseInt(in) == i)
			{
				confirm(inventory, store, selectionIndex);
			}
		}
	}
	
	/**
	 * browseListener takes in input for a selected item and adds it to the cart
	 * if the player has enough gold
	 * @param cart
	 * @param store
	 */
	public static void browseListener(Cart cart, ArrayList<Product> store, Inventory inventory)
	{
		Scanner scan = new Scanner(System.in);
		String in = scan.nextLine();
		int selectionIndex = -1;
		try
		{
			selectionIndex = Integer.parseInt(in) - 1;
		}
		catch(Exception e)
		{
			if(in.equalsIgnoreCase("q"))
			{
				displayMenus(inventory, "Product", store, cart);
			}
		}
		
		for(int i = 0; i < store.size(); i++)
		{
			if(Integer.parseInt(in) - 1 == i)
			{
				if(inventory.canPurchase(store.get(selectionIndex)))
				{
					if(store.get(selectionIndex).getQuantity() > 0)
					{
						cart.addToCart(store.get(selectionIndex));
					}
				}
			}
		}
		if(!in.equalsIgnoreCase("q"))
		{
			displayMenus(inventory, "Product", store, cart);
		}
	}
	/**
	 * listener waits for input and directs the player to the correct menu based on their input
	 * @param inventory
	 * @param cart
	 * @param store
	 * @param scan
	 */
	public static void listener(Inventory inventory, Cart cart, ArrayList<Product> store, Scanner scan)
	{
		String in = scan.nextLine();
		String last = "";
		
		if("1".equals(in))
		{
			displayMenus(inventory, "Product", store, cart);
		}
		if("2".equals(in))
		{
			displayMenus(inventory, "Inventory", store, cart);
		}
		if("3".equals(in))
		{
			displayMenus(inventory, "Cart", store, cart);
		}
		if("4".equals(in))
		{
			System.out.println();
		}
		if("q".equalsIgnoreCase(in))
		{
			displayMenus(inventory, "Main", store, cart);
		}
		if(!in.equals("1") && !in.equals("2") && !in.equals("3") && !in.equals("4") && !in.equalsIgnoreCase("q"))
		{
			System.out.println("You look down as the ground beneath your feet begins to crumble away.\n"
					+ "As you begin to fall, Xoblob casts Bigby's Hand,\nmaterializing an enormous purple-gloved hand hovering in midair,\n"
					+ "quickly grabbing you before you fall and bringing you back to a safer area of the shop.\n");
			displayMenus(inventory, "Main", store, cart);
		}
		if(!last.equals(in))
		{
			last = in.toString();
		}

	}
	
	public static void main(String[] args)
	{
		Scanner scan = new Scanner(System.in);
		Cart cart = new Cart();
		Inventory inventory = new Inventory();
		store = init();
		inventory.setGold(42069);
		boolean isValidInput = false;
		while(!isValidInput)
		{
			listener(inventory, cart, store, scan);
		}
	}
}